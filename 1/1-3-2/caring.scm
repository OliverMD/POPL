#lang racket
(define (visit-doctor name)
  (begin
    (print (list 'hello name))
    (print '(what seems to be the trouble?))
    (doctor-driver-loop name '())))
(define (doctor-driver-loop name acc)
  (begin
    (newline)
    (display '**)
    (let ((user-response (read)))
      (if (equal? user-response '(goodbye))
                (begin
                   (print (list 'goodbye name))
                   (print '(see you next week))
                )
                (begin
                    (print (reply user-response acc))
                    (doctor-driver-loop name (append acc user-response))
                )))))
(define (reply user-response previous)
  (if (fifty-fifty)
        (append (qualifier) (change-person user-response))
        (if (fifty-fifty) (hedge) (append '(earlier you said) (change-person (pick-random previous))))))
(define (fifty-fifty) (= (random 2) 0))
(define (qualifier)
  (pick-random '((you seem to think)
                 (you feel that)
                 (why do you believe)
                 (why do you say))))
(define (hedge)
  (pick-random
   '((please go on)
     (many people have the same sorts of feelings)
     (many of my patients have told me the same thing)
     (please continue))))
(define (replace pattern replacement lst)
  (cond ((null? lst) '())
        ((equal? (car lst) pattern)
                 (cons replacement
                       (replace pattern replacement (cdr lst)))
        )
        (else (cons (car lst)
                    (replace pattern replacement (cdr lst)))
        )))
(define (replace-pats replacement-pairs elm)
  (if (null? replacement-pairs)
      elm
  (let ((pat-rep (car replacement-pairs)))
        (if (equal? (car pat-rep) elm) (cadr pat-rep) (replace-pats (cdr replacement-pairs) elm)))
  ))
(define (many-replace replacement-pairs lst)
  (if (null? replacement-pairs)
         lst
         (let ((pat-rep (car replacement-pairs)))
                (replace (car pat-rep)
                         (cadr pat-rep)
                         (many-replace (cdr replacement-pairs)
                                       lst)))))
(define (replace-many replacement-pairs lst)
  (if (null? lst)
      '()
      (cons (replace-pats replacement-pairs (car lst)) (replace-many replacement-pairs (cdr lst)))
      
  ))
(define (change-person phrase)
  (replace-many '((are am) (you i) (your my) (i you) (me you) (am are) (my your))
                phrase))
(define (pick-random lst) (list-ref lst (random (length lst))))
